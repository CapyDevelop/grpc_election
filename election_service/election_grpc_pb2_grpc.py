# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import election_service.election_grpc_pb2 as election__grpc__pb2


class ElectionServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetElection = channel.unary_unary(
                '/election_grpc.ElectionService/GetElection',
                request_serializer=election__grpc__pb2.Empty.SerializeToString,
                response_deserializer=election__grpc__pb2.GetElectionResponse.FromString,
                )
        self.SetCandidateTmp = channel.unary_unary(
                '/election_grpc.ElectionService/SetCandidateTmp',
                request_serializer=election__grpc__pb2.SetCandidateRequest.SerializeToString,
                response_deserializer=election__grpc__pb2.SetCandidateResponse.FromString,
                )
        self.SetCandidateCapy = channel.unary_unary(
                '/election_grpc.ElectionService/SetCandidateCapy',
                request_serializer=election__grpc__pb2.SetCandidateRequest.SerializeToString,
                response_deserializer=election__grpc__pb2.SetCandidateResponse.FromString,
                )
        self.CheckCandidateTmp = channel.unary_unary(
                '/election_grpc.ElectionService/CheckCandidateTmp',
                request_serializer=election__grpc__pb2.CheckCandidateRequest.SerializeToString,
                response_deserializer=election__grpc__pb2.CheckCandidateResponse.FromString,
                )
        self.CheckCandidateCapy = channel.unary_unary(
                '/election_grpc.ElectionService/CheckCandidateCapy',
                request_serializer=election__grpc__pb2.CheckCandidateRequest.SerializeToString,
                response_deserializer=election__grpc__pb2.CheckCandidateResponse.FromString,
                )
        self.SendPassword = channel.unary_unary(
                '/election_grpc.ElectionService/SendPassword',
                request_serializer=election__grpc__pb2.SendPasswordRequest.SerializeToString,
                response_deserializer=election__grpc__pb2.SendPasswordResponse.FromString,
                )
        self.ConfirmPassword = channel.unary_unary(
                '/election_grpc.ElectionService/ConfirmPassword',
                request_serializer=election__grpc__pb2.ConfirmPasswordRequest.SerializeToString,
                response_deserializer=election__grpc__pb2.ConfirmPasswordResponse.FromString,
                )
        self.GetCandidates = channel.unary_unary(
                '/election_grpc.ElectionService/GetCandidates',
                request_serializer=election__grpc__pb2.Empty.SerializeToString,
                response_deserializer=election__grpc__pb2.GetCandidatesResponse.FromString,
                )
        self.VoteTmp = channel.unary_unary(
                '/election_grpc.ElectionService/VoteTmp',
                request_serializer=election__grpc__pb2.VoteRequest.SerializeToString,
                response_deserializer=election__grpc__pb2.VoteResponse.FromString,
                )
        self.VoteCapy = channel.unary_unary(
                '/election_grpc.ElectionService/VoteCapy',
                request_serializer=election__grpc__pb2.VoteRequest.SerializeToString,
                response_deserializer=election__grpc__pb2.VoteResponse.FromString,
                )
        self.MyCandidatesTmp = channel.unary_unary(
                '/election_grpc.ElectionService/MyCandidatesTmp',
                request_serializer=election__grpc__pb2.MyCandidateRequest.SerializeToString,
                response_deserializer=election__grpc__pb2.MyCandidateResponse.FromString,
                )
        self.MyCandidatesCapy = channel.unary_unary(
                '/election_grpc.ElectionService/MyCandidatesCapy',
                request_serializer=election__grpc__pb2.MyCandidateRequest.SerializeToString,
                response_deserializer=election__grpc__pb2.MyCandidateResponse.FromString,
                )
        self.GetStatistic = channel.unary_unary(
                '/election_grpc.ElectionService/GetStatistic',
                request_serializer=election__grpc__pb2.Empty.SerializeToString,
                response_deserializer=election__grpc__pb2.GetStatisticResponse.FromString,
                )


class ElectionServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetElection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetCandidateTmp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetCandidateCapy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckCandidateTmp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckCandidateCapy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendPassword(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfirmPassword(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCandidates(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VoteTmp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VoteCapy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MyCandidatesTmp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MyCandidatesCapy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStatistic(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ElectionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetElection': grpc.unary_unary_rpc_method_handler(
                    servicer.GetElection,
                    request_deserializer=election__grpc__pb2.Empty.FromString,
                    response_serializer=election__grpc__pb2.GetElectionResponse.SerializeToString,
            ),
            'SetCandidateTmp': grpc.unary_unary_rpc_method_handler(
                    servicer.SetCandidateTmp,
                    request_deserializer=election__grpc__pb2.SetCandidateRequest.FromString,
                    response_serializer=election__grpc__pb2.SetCandidateResponse.SerializeToString,
            ),
            'SetCandidateCapy': grpc.unary_unary_rpc_method_handler(
                    servicer.SetCandidateCapy,
                    request_deserializer=election__grpc__pb2.SetCandidateRequest.FromString,
                    response_serializer=election__grpc__pb2.SetCandidateResponse.SerializeToString,
            ),
            'CheckCandidateTmp': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckCandidateTmp,
                    request_deserializer=election__grpc__pb2.CheckCandidateRequest.FromString,
                    response_serializer=election__grpc__pb2.CheckCandidateResponse.SerializeToString,
            ),
            'CheckCandidateCapy': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckCandidateCapy,
                    request_deserializer=election__grpc__pb2.CheckCandidateRequest.FromString,
                    response_serializer=election__grpc__pb2.CheckCandidateResponse.SerializeToString,
            ),
            'SendPassword': grpc.unary_unary_rpc_method_handler(
                    servicer.SendPassword,
                    request_deserializer=election__grpc__pb2.SendPasswordRequest.FromString,
                    response_serializer=election__grpc__pb2.SendPasswordResponse.SerializeToString,
            ),
            'ConfirmPassword': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfirmPassword,
                    request_deserializer=election__grpc__pb2.ConfirmPasswordRequest.FromString,
                    response_serializer=election__grpc__pb2.ConfirmPasswordResponse.SerializeToString,
            ),
            'GetCandidates': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCandidates,
                    request_deserializer=election__grpc__pb2.Empty.FromString,
                    response_serializer=election__grpc__pb2.GetCandidatesResponse.SerializeToString,
            ),
            'VoteTmp': grpc.unary_unary_rpc_method_handler(
                    servicer.VoteTmp,
                    request_deserializer=election__grpc__pb2.VoteRequest.FromString,
                    response_serializer=election__grpc__pb2.VoteResponse.SerializeToString,
            ),
            'VoteCapy': grpc.unary_unary_rpc_method_handler(
                    servicer.VoteCapy,
                    request_deserializer=election__grpc__pb2.VoteRequest.FromString,
                    response_serializer=election__grpc__pb2.VoteResponse.SerializeToString,
            ),
            'MyCandidatesTmp': grpc.unary_unary_rpc_method_handler(
                    servicer.MyCandidatesTmp,
                    request_deserializer=election__grpc__pb2.MyCandidateRequest.FromString,
                    response_serializer=election__grpc__pb2.MyCandidateResponse.SerializeToString,
            ),
            'MyCandidatesCapy': grpc.unary_unary_rpc_method_handler(
                    servicer.MyCandidatesCapy,
                    request_deserializer=election__grpc__pb2.MyCandidateRequest.FromString,
                    response_serializer=election__grpc__pb2.MyCandidateResponse.SerializeToString,
            ),
            'GetStatistic': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStatistic,
                    request_deserializer=election__grpc__pb2.Empty.FromString,
                    response_serializer=election__grpc__pb2.GetStatisticResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'election_grpc.ElectionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ElectionService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetElection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/election_grpc.ElectionService/GetElection',
            election__grpc__pb2.Empty.SerializeToString,
            election__grpc__pb2.GetElectionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetCandidateTmp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/election_grpc.ElectionService/SetCandidateTmp',
            election__grpc__pb2.SetCandidateRequest.SerializeToString,
            election__grpc__pb2.SetCandidateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetCandidateCapy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/election_grpc.ElectionService/SetCandidateCapy',
            election__grpc__pb2.SetCandidateRequest.SerializeToString,
            election__grpc__pb2.SetCandidateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckCandidateTmp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/election_grpc.ElectionService/CheckCandidateTmp',
            election__grpc__pb2.CheckCandidateRequest.SerializeToString,
            election__grpc__pb2.CheckCandidateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckCandidateCapy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/election_grpc.ElectionService/CheckCandidateCapy',
            election__grpc__pb2.CheckCandidateRequest.SerializeToString,
            election__grpc__pb2.CheckCandidateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendPassword(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/election_grpc.ElectionService/SendPassword',
            election__grpc__pb2.SendPasswordRequest.SerializeToString,
            election__grpc__pb2.SendPasswordResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfirmPassword(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/election_grpc.ElectionService/ConfirmPassword',
            election__grpc__pb2.ConfirmPasswordRequest.SerializeToString,
            election__grpc__pb2.ConfirmPasswordResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCandidates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/election_grpc.ElectionService/GetCandidates',
            election__grpc__pb2.Empty.SerializeToString,
            election__grpc__pb2.GetCandidatesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VoteTmp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/election_grpc.ElectionService/VoteTmp',
            election__grpc__pb2.VoteRequest.SerializeToString,
            election__grpc__pb2.VoteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VoteCapy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/election_grpc.ElectionService/VoteCapy',
            election__grpc__pb2.VoteRequest.SerializeToString,
            election__grpc__pb2.VoteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MyCandidatesTmp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/election_grpc.ElectionService/MyCandidatesTmp',
            election__grpc__pb2.MyCandidateRequest.SerializeToString,
            election__grpc__pb2.MyCandidateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MyCandidatesCapy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/election_grpc.ElectionService/MyCandidatesCapy',
            election__grpc__pb2.MyCandidateRequest.SerializeToString,
            election__grpc__pb2.MyCandidateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetStatistic(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/election_grpc.ElectionService/GetStatistic',
            election__grpc__pb2.Empty.SerializeToString,
            election__grpc__pb2.GetStatisticResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
